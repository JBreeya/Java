Introduction 
Java is an object-oriented, multi-threaded programming language.
Created in 1995.
It was developed by James Gosling, Patrick Naughton, Mike Sheridan, Chris Warth, and Ed Frank.

Features
1. Simple:
      Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, and Explicit memory allocation. 
2. Secure:
      In Java, we don’t have pointers, so we cannot access out-of-bound arrays i.e. it shows ArrayIndexOutOfBound Exception if we try to do so. 
  That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. 
  Also, java programs run in an environment independent of the os(operating system) environment, making Java programs more secure.
3. Robust:
      Java language is robust which means reliable. 
  It is developed in such a way that it puts a lot of effort into checking errors as early as possible, 
  that is why the Java compiler is able to detect even those errors that are not easy to detect by another programming language. 
  The main features of Java that make it robust are garbage collection, Exception Handling, and memory allocation.
4. Portable:
      As we know, java code written on one machine can be run on another machine.
  The platform-independent feature of Java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.
5. Dynamic flexibility: 
      Java being completely object-oriented gives us the flexibility to add classes, and new methods to existing classes, and even create new classes through sub-classes.
  Java even supports functions written in other languages such as C and C++ which are referred to as native methods.
6. Platform Independent: 
      The compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. 
  This bytecode can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. 
  Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of the bytecode. 
  That is why we call Java a platform-independent language.
7. Interpretation / Compilation:
      Most languages are designed with the purpose of either they have compiled language or they are interpreted language. 
  But Java integrates arising enormous power as the Java compiler compiles the source code to bytecode and JVM  executes this bytecode to machine OS-dependent executable code.
  Sandbox Execution - Java programs run in a separate space that allows user to execute their applications without affecting the underlying system with the help of a bytecode verifier. 
  Bytecode verifier also provides additional security as its role is to check the code for any violation of access.
  JIT - Java architecture is defined in such a way that it reduces overhead during the runtime and at some times java uses Just In Time (JIT) compiler 
  where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.
8. Multithreading:  
      Java supports multithreading. 
  It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of the CPU.
9. Remote Method Invocation (RMI): 
      As discussed above java application generates a ‘.class’ file that corresponds to our applications(program) but contains code in binary format. 
  It provides ease t architecture-neutral ease as bytecode is not dependent on any machine architecture. 
  It is the primary reason Java is used in the enterprising IT industry globally worldwide.
10.  Distributed Computing: 
      We can create distributed applications using the Java programming language.
  Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in Java. 
  The Java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.
11. Object-Oriented Programming Language: 
      Organizing the program in terms of a collection of objects is a way of object-oriented programming, each of which represents an instance of the class.
  The four main concepts of Object-Oriented programming:
    Inheritance, Data Encapsulation, Polymorphism, Data Abstraction

Object Oriented Programming Concepts
 Object - Identity, Behaviour, Attribute

1. Inheritance:
      Inheritance is an important pillar of OOP (Object Oriented Programming). 
  It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class. 
  We are achieving inheritance by using extends keyword. 
  Inheritance is also known as an “is-a” relationship.
  ^Superclass: 
    The class whose features are inherited is known as the superclass (also known as the base or parent class).
  ^Subclass: 
    The class that inherits the other class is known as a subclass (also known as derived or extended or child class). 
    The subclass can add its fields and methods in addition to the superclass fields and methods.
  ^Reusability: 
    Inheritance supports the concept of “reusability”, 
    i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. 
    By doing this, we are reusing the fields and methods of the existing class.
2. Data Encapsulation:
  It is defined as the wrapping up of data under a single unit. 
  It is the mechanism that binds together the code and the data it manipulates. 
  Another way to think about encapsulation is that it is a protective shield that prevents the data from being accessed by the code outside this shield. 
  ^Technically, in encapsulation, the variables or the data in a class are hidden from any other class and 
    can be accessed only through any member function of the class in which they are declared.
  ^In encapsulation, the data in a class is hidden from other classes, which is similar to what data hiding does. 
    So, the terms “encapsulation” and “data-hiding” are used interchangeably.
  ^Encapsulation can be achieved by declaring all the variables in a class as private and 
    writing public methods in the class to set and get the values of the variables.
3. Polymorphism:
  It refers to the ability of object-oriented programming languages to differentiate between entities with the same name efficiently. 
  This is done by Java with the help of the signature and declaration of these entities. 
  The ability to appear in many forms is called polymorphism.
4. Data Abstraction:
  Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or non-essential units are not displayed to the user. 
  Ex: A car is viewed as a car rather than its individual components.
  Data Abstraction may also be defined as the process of identifying only the required characteristics of an object, ignoring the irrelevant details. 
  The properties and behaviors of an object differentiate it from other objects of similar type and also help in classifying/grouping the object.

Class
  ^Collection of information and stores member variables and member functions.
  ^New objects can be created from the class.
  ^An object is an instantiation of a class.

Variable
  ^Storing a value, the variable can be changed throughout the program.
  Types
    ^Static Variable
    ^Instance Variable

Constant
  The value assigned to the Variable.

DATA TYPES
  1. Boolean Data Type
        Boolean data type represents only one bit of information either true or false which is intended to represent the two truth values of logic and Boolean algebra, 
      but the size of the boolean data type is virtual machine-dependent. 
      Values of type boolean are not converted implicitly or explicitly (with casts) to any other type. But the programmer can easily write conversion code.

    Syntax: 
      boolean booleanVar;

  2. Byte Data Type
        The byte data type is an 8-bit signed two’s complement integer. 
      The byte data type is useful for saving memory in large arrays.

    Syntax: 
      byte byteVar;






















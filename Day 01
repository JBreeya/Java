INTRODUCTION
Java is an object-oriented, multi-threaded programming language.
Created in 1995.
It was developed by James Gosling, Patrick Naughton, Mike Sheridan, Chris Warth, and Ed Frank.

FEATURES
1. Simple:
      Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, and Explicit memory allocation. 
2. Secure:
      In Java, we don’t have pointers, so we cannot access out-of-bound arrays i.e. it shows ArrayIndexOutOfBound Exception if we try to do so. 
  That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. 
  Also, java programs run in an environment independent of the os(operating system) environment, making Java programs more secure.
3. Robust:
      Java language is robust which means reliable. 
  It is developed in such a way that it puts a lot of effort into checking errors as early as possible, 
  that is why the Java compiler is able to detect even those errors that are not easy to detect by another programming language. 
  The main features of Java that make it robust are garbage collection, Exception Handling, and memory allocation.
4. Portable:
      As we know, java code written on one machine can be run on another machine.
  The platform-independent feature of Java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.
5. Dynamic flexibility: 
      Java being completely object-oriented gives us the flexibility to add classes, and new methods to existing classes, and even create new classes through sub-classes.
  Java even supports functions written in other languages such as C and C++ which are referred to as native methods.
6. Platform Independent: 
      The compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. 
  This bytecode can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. 
  Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of the bytecode. 
  That is why we call Java a platform-independent language.
7. Interpretation / Compilation:
      Most languages are designed with the purpose of either they have compiled language or they are interpreted language. 
  But Java integrates arising enormous power as the Java compiler compiles the source code to bytecode and JVM  executes this bytecode to machine OS-dependent executable code.
  Sandbox Execution - Java programs run in a separate space that allows user to execute their applications without affecting the underlying system with the help of a bytecode verifier. 
  Bytecode verifier also provides additional security as its role is to check the code for any violation of access.
  JIT - Java architecture is defined in such a way that it reduces overhead during the runtime and at some times java uses Just In Time (JIT) compiler 
  where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.
8. Multithreading:  
      Java supports multithreading. 
  It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of the CPU.
9. Remote Method Invocation (RMI): 
      As discussed above java application generates a ‘.class’ file that corresponds to our applications(program) but contains code in binary format. 
  It provides ease t architecture-neutral ease as bytecode is not dependent on any machine architecture. 
  It is the primary reason Java is used in the enterprising IT industry globally worldwide.
10.  Distributed Computing: 
      We can create distributed applications using the Java programming language.
  Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in Java. 
  The Java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.
11. Object-Oriented Programming Language: 
      Organizing the program in terms of a collection of objects is a way of object-oriented programming, each of which represents an instance of the class.
  The four main concepts of Object-Oriented programming:
    Inheritance, Data Encapsulation, Polymorphism, Data Abstraction

OBJECT-ORIENTED PROGRAMMING CONCEPTS
 Object - Identity, Behaviour, Attribute

1. INHERITANCE:
      Inheritance is an important pillar of OOP (Object Oriented Programming). 
  It is the mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class. 
  We are achieving inheritance by using extends keyword. 
  Inheritance is also known as an “is-a” relationship.
  ^Superclass: 
    The class whose features are inherited is known as the superclass (also known as the base or parent class).
  ^Subclass: 
    The class that inherits the other class is known as a subclass (also known as derived or extended or child class). 
    The subclass can add its fields and methods in addition to the superclass fields and methods.
  ^Reusability: 
    Inheritance supports the concept of “reusability”, 
    i.e. when we want to create a new class and there is already a class that includes some of the code that we want, we can derive our new class from the existing class. 
    By doing this, we are reusing the fields and methods of the existing class.

2. DATA ENCAPSULATION:
  It is defined as the wrapping up of data under a single unit. 
  It is the mechanism that binds together the code and the data it manipulates. 
  Another way to think about encapsulation is that it is a protective shield that prevents the data from being accessed by the code outside this shield. 
  ^Technically, in encapsulation, the variables or the data in a class are hidden from any other class and 
    can be accessed only through any member function of the class in which they are declared.
  ^In encapsulation, the data in a class is hidden from other classes, which is similar to what data hiding does. 
    So, the terms “encapsulation” and “data-hiding” are used interchangeably.
  ^Encapsulation can be achieved by declaring all the variables in a class as private and 
    writing public methods in the class to set and get the values of the variables.

3. POLYMORPHISM:
  It refers to the ability of object-oriented programming languages to differentiate between entities with the same name efficiently. 
  This is done by Java with the help of the signature and declaration of these entities. 
  The ability to appear in many forms is called polymorphism.

4. DATA ABSTRACTION:
  Data Abstraction is the property by virtue of which only the essential details are displayed to the user. The trivial or non-essential units are not displayed to the user. 
  Ex: A car is viewed as a car rather than its individual components.
  Data Abstraction may also be defined as the process of identifying only the required characteristics of an object, ignoring the irrelevant details. 
  The properties and behaviors of an object differentiate it from other objects of similar type and also help in classifying/grouping the object.

Class
  ^Collection of information and stores member variables and member functions.
  ^New objects can be created from the class.
  ^An object is an instantiation of a class.

Variable
  ^Storing a value, the variable can be changed throughout the program.
  Types
    ^Static Variable
    ^Instance Variable

Constant
  The value assigned to the Variable.

DATA TYPES

PRIMITIVE DATA TYPES
  1. Boolean Data Type
        Boolean data type represents only one bit of information either true or false which is intended to represent the two truth values of logic and Boolean algebra, 
      but the size of the boolean data type is virtual machine-dependent. 
      Values of type boolean are not converted implicitly or explicitly (with casts) to any other type. But the programmer can easily write conversion code.

    Syntax: 
      boolean booleanVar;

  2. Byte Data Type
            The byte data type is an 8-bit signed two’s complement integer. 
      The byte data type is useful for saving memory in large arrays.

      Syntax: 
            byte byteVar;

3. Short Data Type
            The short data type is a 16-bit signed two’s complement integer. 
      Similar to byte, use a short to save memory in large arrays, in situations where the memory savings actually matters.

      Syntax: 
            short shortVar;

4. Integer Data Type
            It is a 32-bit signed two’s complement integer.

      Syntax: 
            int intVar;

5. Long Data Type
            The range of a long is quite large. 
      The long data type is a 64-bit two’s complement integer and is useful for those occasions where an int type is not large enough to hold the desired value. The size of the Long Datatype is 8 bytes (64 bits).

      Syntax: 
            long longVar;

6. Float Data Type
            The float data type is a single-precision 32-bit IEEE 754 floating-point.
      Use a float (instead of double) if you need to save memory in large arrays of floating-point numbers.
      The size of the float data type is 4 bytes (32 bits).

      Syntax: 
            float floatVar;

7. Double Data Type
            The double data type is a double-precision 64-bit IEEE 754 floating-point.
      For decimal values, this data type is generally the default choice. 
      The size of the double data type is 8 bytes or 64 bits.

      Syntax:
            double doubleVar;

8. Char Data Type
            The char data type is a single 16-bit Unicode character with the size of 2 bytes (16 bits).

      Syntax: 
            char charVar;

NON-PRIMITIVE OR REFERENCE DATA TYPES
1. Strings 
            Strings are defined as an array of characters. 
      The difference between a character array and a string in Java is, that the string is designed to hold a sequence of characters in a single variable whereas, a character array is a collection of separate char-type entities. Unlike C/C++, Java strings are not terminated with a null character.

      Syntax: Declaring a string
            <String_Type> <string_variable> = “<sequence_of_string>”;

2. Class
            A class is a user-defined blueprint or prototype from which objects are created. 
      It represents the set of properties or methods that are common to all objects of one type.
      In general, class declarations can include these components,
      
      In order: 
      ^Modifiers: A class can be public or has default access. Refer to access specifiers for classes or interfaces in Java
      ^Class name: The name should begin with an initial letter (capitalized by convention).
      ^Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. 
            A class can only extend (subclass) one parent.
      ^Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. 
            A class can implement more than one interface.
      ^Body: The class body is surrounded by braces, { }.

3. Object
            An Object is a basic unit of Object-Oriented Programming and represents real-life entities. 
      A typical Java program creates many objects, which as you know, interact by invoking methods. 
      
      An object consists of :
      ^State: It is represented by the attributes of an object. 
            It also reflects the properties of an object.
      ^Behavior: It is represented by the methods of an object. 
            It also reflects the response of an object to other objects.
      ^Identity: It gives a unique name to an object and enables one object to interact with other objects.

4. Interface
            Like a class, an interface can have methods and variables, 
      but the methods declared in an interface are by default abstract (only method signature, no body).   

      ^Interfaces specify what a class must do and not how. It is the blueprint of the class.
      ^An Interface is about capabilities like a Player may be an interface and any class implementing Player must be able to (or must implement) move().
            So it specifies a set of methods that the class has to implement.
      ^If a class implements an interface and does not provide method bodies for all functions specified in the interface, 
            then the class must be declared abstract.
      ^A Java library example is Comparator Interface.
            If a class implements this interface, then it can be used to sort a collection.

5. Array
            An Array is a group of like-typed variables that are referred to by a common name. 
      Arrays in Java work differently than they do in C/C++. 
      The following are some important points about Java arrays. 

      ^In Java, all arrays are dynamically allocated. (discussed below)
      ^Since arrays are objects in Java, we can find their length using member length.
            This is different from C/C++ where we find length using size.
      ^A Java array variable can also be declared like other variables with [] after the data type.
      ^The variables in the array are ordered and each has an index beginning with 0.
      ^Java array can also be used as a static field, a local variable, or a method parameter.
      ^The size of an array must be specified by an int value and not long or short.
      ^The direct superclass of an array type is Object.
      ^Every array type implements the interfaces Cloneable and java.io.Serializable.

OPERATORS
1. Arithmetic Operators
            They are used to perform simple arithmetic operations on primitive data types.

                  * : Multiplication
                  / : Division
                  % : Modulo
                  + : Addition
                  – : Subtraction

2. Unary Operators
            Unary operators need only one operand. They are used to increment, decrement, or negate a value. 

                  – : Unary minus, used for negating the values.
                  + : Unary plus indicates the positive value (numbers are positive without this, however). 
                        It performs an automatic conversion to int when the type of its operand is the byte, char, or short.
                        This is called unary numeric promotion.
                  ++ : Increment operator, used for incrementing the value by 1. 
                        There are two varieties of increment operators. 
                  Post-Increment: Value is first used for computing the result and then incremented.
                  Pre-Increment: Value is incremented first, and then the result is computed.
                  – –  : Decrement operator, used for decrementing the value by 1. 
                        There are two varieties of decrement operators. 
                  Post-decrement: Value is first used for computing the result and then decremented.
                  Pre-Decrement: The value is decremented first, and then the result is computed.
                  ! : Logical not operator, used for inverting a boolean value.

3. Assignment Operators
             ‘=’ Assignment operator is used to assign a value to any variable. It has right-to-left associativity, i.e. value given on the right-hand side of the operator is assigned to the variable on the left, and therefore right-hand side value must be declared before using it or should be a constant. 

            The general format of the assignment operator is:
                  variable = value;

            In many cases, the assignment operator can be combined with other operators to build a shorter version of the statement called a Compound Statement. 
            For example, instead of a = a+5, we can write a += 5. 

                  +=, for adding the left operand with the right operand and then assigning it to the variable on the left.
                  -=, for subtracting the right operand from the left operand and then assigning it to the variable on the left.
                  *=, for multiplying the left operand with the right operand and then assigning it to the variable on the left.
                  /=, for dividing the left operand by the right operand and then assigning it to the variable on the left.
                  %=, for assigning the modulo of the left operand by the right operand and then assigning it to the variable on the left.

4. Relational Operators
            These operators are used to check for relations like equality, greater than, and less than. 
      They return boolean results after the comparison and are extensively used in looping statements as well as conditional if-else statements. 
                  
                  The general format is, 
                        variable relation_operator value

            Some of the relational operators are- 
                  ==, Equal to returns true if the left-hand side is equal to the right-hand side.
                  !=, Not Equal to returns true if the left-hand side is not equal to the right-hand side.
                  <, less than: returns true if the left-hand side is less than the right-hand side.
                  <=, less than or equal to returns true if the left-hand side is less than or equal to the right-hand side.
                  >, Greater than: returns true if the left-hand side is greater than the right-hand side.
                  >=, Greater than or equal to returns true if the left-hand side is greater than or equal to the right-hand side.

5. Logical Operators
            These operators are used to perform “logical AND” and “logical OR” operations, 
      i.e., a function similar to the AND gate and OR gate in digital electronics. 
      One thing to keep in mind is the second condition is not evaluated if the first one is false, i.e., it has a short-circuiting effect. Used extensively to test for several conditions for making a decision. Java also has “Logical NOT”, which returns true when the condition is false and vice-versa

      Conditional operators are:
                  &&, Logical AND: returns true when both conditions are true.
                  ||, Logical OR: returns true if at least one condition is true.
                  !, Logical NOT: returns true when a condition is false and vice-versa

6. Ternary operator
            The ternary operator is a shorthand version of the if-else statement. 
      It has three operands and hence the name Ternary.

            The general format is:
                  condition ? if true : if false

            The above statement means that if the condition evaluates to true, 
            then execute the statements after the ‘?’ else execute the statements after the ‘:’.  

7. Bitwise Operators
            These operators are used to perform the manipulation of individual bits of a number. 
      They can be used with any of the integer types. 
      They are used when performing update and query operations of the Binary indexed trees. 

                  &, Bitwise AND operator: returns bit by bit AND of input values.
                  |, Bitwise OR operator: returns bit by bit OR of input values.
                  ^, Bitwise XOR operator: returns bit-by-bit XOR of input values.
                  ~, Bitwise Complement Operator: This is a unary operator which returns the one’s complement representation of the input value, 
                        i.e., with all bits inverted.

8. Shift Operators
            These operators are used to shift the bits of a number left or right, thereby multiplying or dividing the number by two, respectively.
      They can be used when we have to multiply or divide a number by two. 

            General format- 
                  number shift_op number_of_places_to_shift;

                  <<, Left shift operator: shifts the bits of the number to the left and fills 0 on voids left as a result. Similar effect as multiplying the number with some power of two.
                  >>, Signed Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit depends on the sign of the initial number. Similar effect to dividing the number with some power of two.
                  >>>, Unsigned Right shift operator: shifts the bits of the number to the right and fills 0 on voids left as a result. The leftmost bit is set to 0.

9. instanceof operator
            The instance of the operator is used for type checking. 
      It can be used to test if an object is an instance of a class, a subclass, or an interface.

            General format- 
                  object instance of class/subclass/interface


- THE END OF DAY 1 -









